#!/bin/bash

getlinuxdir () {
  cat /etc/issue | grep -i 'mint' > /dev/null && echo mint && return 0
  cat /etc/issue | grep -i 'kali' > /dev/null && echo kali && return 0
}

getosdir () {
  if [ "$(uname)" = "Darwin" ]; then
    # Do something under Mac OS X platform
    echo "darwin"
  elif [ "$(uname)" = "Linux" ]; then
    # Do something under GNU/Linux platform
    echo `getlinuxdir`
  elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
    # Do something under Windows NT platform
    return "$(expr substr $(uname -s) 1 10)"
  fi
}

vmx() {
  echo "[Hypervisor Detection] $1 is the one virtualizes this machine. proceeding..."
  sh /tmp/pde/`getosdir`/guest/vmware.sh
}

vbox() {
  echo "[Hypervisor Detection] $1 is the one virtualizes this machine. proceeding..."
  sh /tmp/pde/`getosdir`/guest/virtualbox.sh
}

vmopt() {
  HYPERV=`sudo dmidecode -s system-product-name`

  if [ "$HYPERV" = "VirtualBox" ]; then
    vbox $HYPERV
    return 0
  fi

  if [ "$HYPERV" = "VMware Virtual Platform" ]; then
    vmx $HYPERV
    return 0
  fi

  echo "[ERROR] This machine likely has none of Hypervisor. abort"
  return 1

}

preinstall_apt() {
  if [ -z `which ansible` ]; then
    sudo apt install -y software-properties-common
    sudo apt-add-repository ppa:ansible/ansible
    sudo apt update
    sudo apt install -y ansible
    sudo chown -R -v $USER ~/.ansible
  fi

  sudo apt install -y git

  cd /tmp
  git clone https://github.com/o2346/pde

}

preinstall_dnf() {
  echo hoge
}

preinstall_brew() {

  if [ -z `which brew` ]; then
    # appleid required beforhand
    # is this better?
    xcode-select --install
    sudo xcodebuild -license
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew update
  fi
  if [ -z `which ansible` ]; then
    brew install ansible
  fi
  if [ -z `which git` ]; then
    brew install git
  fi

  cd /tmp
  git clone https://github.com/o2346/pde

}

preinstall() {
  if [ "$(uname)" = "Darwin" ]; then
    echo "preinstall for macos"
    preinstall_brew
  elif which apt 2>/dev/null; then
    # Do something under GNU/Linux platform
    preinstall_apt
  elif which dnf 2>/dev/null; then
    # Do something under GNU/Linux platform
    preinstall_dnf
  fi
}

OSDIR=`getosdir`
USER=`whoami`

echo "$OSDIR"
echo "$USER"

export DEBIAN_FRONTEND=noninteractive
sudo apt update
sudo apt                               \
  -o Dpkg::Options::="--force-confdef" \
  -o Dpkg::Options::="--force-confold" \
  -yq dist-upgrade

# switch playbook for master or test
while getopts "devi" OPT ; do
  case $OPT in
    d)  echo Branch: Develop OSDIR=$OSDIR
        preinstall
        cd /tmp/pde
        git checkout develop
        git pull
        cd /tmp/pde/$OSDIR
        sh /tmp/pde/$OSDIR/ansible.sh
        ;;
    e)  echo Branch: Develop OSDIR=$OSDIR
        preinstall
        cd /tmp/pde
        git checkout develop
        git pull
        cd /tmp/pde/$OSDIR
        sh /tmp/pde/$OSDIR/ansible.sh -e
        ;;
    v)  echo Virtual Machine Optimization mode OSDIR=$OSDIR
        vmopt
        exit 0
        ;;
    i)  echo init mode
        preinstall
        cd /tmp/pde
        git checkout develop
        git pull
        cd /tmp/pde/$OSDIR
        echo INIT
        echo `pwd`
        echo $OSDIR
        sh /tmp/pde/$OSDIR/ansible.sh -i
        ;;
  esac
done

# without arguments
if [ $# -eq 0 ] ; then
  echo Branch: Master OSDIR=$OSDIR
  preinstall
  cd /tmp/pde/$OSDIR
  sh /tmp/pde/$OSDIR/ansible.sh
fi

